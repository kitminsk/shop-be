# For full config options, check the docs:
#    docs.serverless.com

service: product-service

frameworkVersion: '3'

# How to setup swagger generation
# https://www.npmjs.com/package/serverless-auto-swagger
# plugins:
#  - serverless-auto-swagger

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  # setup profile for AWS CLI.
  profile: default
  environment:
    TABLE_PRODUCTS: 'products'
    TABLE_STOCKS: 'stocks'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TABLE_PRODUCTS}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TABLE_STOCKS}"
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt: [ catalogItemsQueue, Arn ]
        - Effect: Allow
          Action: "sns:*"
          Resource:
            - Ref: SNSCreateProductTopic
functions:
  getProductsList:
    handler: handlers/getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: handlers/getProductsById.getProductsById
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: false
  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    environment:
      SNS_TOPIC:
        Ref: SNSCreateProductTopic
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
          batchSize: 5
          functionResponseType: ReportBatchItemFailures

resources:
  Resources:
    DynamoProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_PRODUCTS}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    DynamoStockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_STOCKS}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue.fifo
        FifoQueue: true
    SNSCreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSCreateProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: kitminsk@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSCreateProductTopic
